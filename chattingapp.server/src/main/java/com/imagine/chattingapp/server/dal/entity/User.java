package com.imagine.chattingapp.server.dal.entity;
// Generated Mar 11, 2019 12:40:18 PM by Hibernate Tools 4.3.1


import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * User generated by hbm2java
 */
@Entity
@Table(name="user"
    ,catalog="chattingapp"
)
public class User  implements java.io.Serializable {


     private String phoneNumber;
     private Country country;
     private UserStatus userStatus;
     private String name;
     private String email;
     private byte[] picture;
     private String password;
     private byte gender;
     private Date dateOfBirth;
     private String biography;
     private Set<Friend> friendsForPhoneNumber2 = new HashSet<Friend>(0);
     private Set<ChatGroupUsers> chatGroupUserses = new HashSet<ChatGroupUsers>(0);
     private Set<ChatGroup> chatGroups = new HashSet<ChatGroup>(0);
     private Set<FriendRequest> friendRequestsForReceiverPhoneNumber = new HashSet<FriendRequest>(0);
     private Set<FriendRequest> friendRequestsForSenderPhoneNumber = new HashSet<FriendRequest>(0);
     private Set<OneToOneMessages> oneToOneMessagesesForSenderPhoneNumber = new HashSet<OneToOneMessages>(0);
     private Set<OneToOneMessages> oneToOneMessagesesForReceiverPhoneNumber = new HashSet<OneToOneMessages>(0);
     private Set<Friend> friendsForPhoneNumber1 = new HashSet<Friend>(0);

    public User() {
    }

	
    public User(String phoneNumber, Country country, UserStatus userStatus, String name, String password, byte gender, Date dateOfBirth) {
        this.phoneNumber = phoneNumber;
        this.country = country;
        this.userStatus = userStatus;
        this.name = name;
        this.password = password;
        this.gender = gender;
        this.dateOfBirth = dateOfBirth;
    }
    public User(String phoneNumber, Country country, UserStatus userStatus, String name, String email, byte[] picture, String password, byte gender, Date dateOfBirth, String biography, Set<Friend> friendsForPhoneNumber2, Set<ChatGroupUsers> chatGroupUserses, Set<ChatGroup> chatGroups, Set<FriendRequest> friendRequestsForReceiverPhoneNumber, Set<FriendRequest> friendRequestsForSenderPhoneNumber, Set<OneToOneMessages> oneToOneMessagesesForSenderPhoneNumber, Set<OneToOneMessages> oneToOneMessagesesForReceiverPhoneNumber, Set<Friend> friendsForPhoneNumber1) {
       this.phoneNumber = phoneNumber;
       this.country = country;
       this.userStatus = userStatus;
       this.name = name;
       this.email = email;
       this.picture = picture;
       this.password = password;
       this.gender = gender;
       this.dateOfBirth = dateOfBirth;
       this.biography = biography;
       this.friendsForPhoneNumber2 = friendsForPhoneNumber2;
       this.chatGroupUserses = chatGroupUserses;
       this.chatGroups = chatGroups;
       this.friendRequestsForReceiverPhoneNumber = friendRequestsForReceiverPhoneNumber;
       this.friendRequestsForSenderPhoneNumber = friendRequestsForSenderPhoneNumber;
       this.oneToOneMessagesesForSenderPhoneNumber = oneToOneMessagesesForSenderPhoneNumber;
       this.oneToOneMessagesesForReceiverPhoneNumber = oneToOneMessagesesForReceiverPhoneNumber;
       this.friendsForPhoneNumber1 = friendsForPhoneNumber1;
    }
   
     @Id 

    
    @Column(name="phone_number", unique=true, nullable=false, length=16)
    public String getPhoneNumber() {
        return this.phoneNumber;
    }
    
    public void setPhoneNumber(String phoneNumber) {
        this.phoneNumber = phoneNumber;
    }

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="country_id", nullable=false)
    public Country getCountry() {
        return this.country;
    }
    
    public void setCountry(Country country) {
        this.country = country;
    }

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="status_id", nullable=false)
    public UserStatus getUserStatus() {
        return this.userStatus;
    }
    
    public void setUserStatus(UserStatus userStatus) {
        this.userStatus = userStatus;
    }

    
    @Column(name="name", nullable=false, length=80)
    public String getName() {
        return this.name;
    }
    
    public void setName(String name) {
        this.name = name;
    }

    
    @Column(name="email", length=80)
    public String getEmail() {
        return this.email;
    }
    
    public void setEmail(String email) {
        this.email = email;
    }

    
    @Column(name="picture")
    public byte[] getPicture() {
        return this.picture;
    }
    
    public void setPicture(byte[] picture) {
        this.picture = picture;
    }

    
    @Column(name="password", nullable=false, length=80)
    public String getPassword() {
        return this.password;
    }
    
    public void setPassword(String password) {
        this.password = password;
    }

    
    @Column(name="gender", nullable=false)
    public byte getGender() {
        return this.gender;
    }
    
    public void setGender(byte gender) {
        this.gender = gender;
    }

    @Temporal(TemporalType.DATE)
    @Column(name="date_of_birth", nullable=false, length=10)
    public Date getDateOfBirth() {
        return this.dateOfBirth;
    }
    
    public void setDateOfBirth(Date dateOfBirth) {
        this.dateOfBirth = dateOfBirth;
    }

    
    @Column(name="biography", length=65535)
    public String getBiography() {
        return this.biography;
    }
    
    public void setBiography(String biography) {
        this.biography = biography;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="userByPhoneNumber2")
    public Set<Friend> getFriendsForPhoneNumber2() {
        return this.friendsForPhoneNumber2;
    }
    
    public void setFriendsForPhoneNumber2(Set<Friend> friendsForPhoneNumber2) {
        this.friendsForPhoneNumber2 = friendsForPhoneNumber2;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="user")
    public Set<ChatGroupUsers> getChatGroupUserses() {
        return this.chatGroupUserses;
    }
    
    public void setChatGroupUserses(Set<ChatGroupUsers> chatGroupUserses) {
        this.chatGroupUserses = chatGroupUserses;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="user")
    public Set<ChatGroup> getChatGroups() {
        return this.chatGroups;
    }
    
    public void setChatGroups(Set<ChatGroup> chatGroups) {
        this.chatGroups = chatGroups;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="userByReceiverPhoneNumber")
    public Set<FriendRequest> getFriendRequestsForReceiverPhoneNumber() {
        return this.friendRequestsForReceiverPhoneNumber;
    }
    
    public void setFriendRequestsForReceiverPhoneNumber(Set<FriendRequest> friendRequestsForReceiverPhoneNumber) {
        this.friendRequestsForReceiverPhoneNumber = friendRequestsForReceiverPhoneNumber;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="userBySenderPhoneNumber")
    public Set<FriendRequest> getFriendRequestsForSenderPhoneNumber() {
        return this.friendRequestsForSenderPhoneNumber;
    }
    
    public void setFriendRequestsForSenderPhoneNumber(Set<FriendRequest> friendRequestsForSenderPhoneNumber) {
        this.friendRequestsForSenderPhoneNumber = friendRequestsForSenderPhoneNumber;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="userBySenderPhoneNumber")
    public Set<OneToOneMessages> getOneToOneMessagesesForSenderPhoneNumber() {
        return this.oneToOneMessagesesForSenderPhoneNumber;
    }
    
    public void setOneToOneMessagesesForSenderPhoneNumber(Set<OneToOneMessages> oneToOneMessagesesForSenderPhoneNumber) {
        this.oneToOneMessagesesForSenderPhoneNumber = oneToOneMessagesesForSenderPhoneNumber;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="userByReceiverPhoneNumber")
    public Set<OneToOneMessages> getOneToOneMessagesesForReceiverPhoneNumber() {
        return this.oneToOneMessagesesForReceiverPhoneNumber;
    }
    
    public void setOneToOneMessagesesForReceiverPhoneNumber(Set<OneToOneMessages> oneToOneMessagesesForReceiverPhoneNumber) {
        this.oneToOneMessagesesForReceiverPhoneNumber = oneToOneMessagesesForReceiverPhoneNumber;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="userByPhoneNumber1")
    public Set<Friend> getFriendsForPhoneNumber1() {
        return this.friendsForPhoneNumber1;
    }
    
    public void setFriendsForPhoneNumber1(Set<Friend> friendsForPhoneNumber1) {
        this.friendsForPhoneNumber1 = friendsForPhoneNumber1;
    }




}


